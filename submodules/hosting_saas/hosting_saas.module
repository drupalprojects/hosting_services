<?php

/**
 * @file
 * This is the main module file for Aegir SaaS.
 *
 * It provides Drupal hooks and functions for the module.
 */

/**
 * Define the role created by the module.
 */
const HOSTING_SAAS_ROLE = "aegir web services";

/**
 * Define the user created by the module.
 */
const HOSTING_SAAS_USER = "Aegir SaaS";

/**
 * Implementation of hook_menu().
 */
function hosting_saas_menu() {
  $items['admin/hosting/saas'] = array(
    'title' => 'SaaS',
    'description' => 'Configure software-as-a-service settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_saas_settings'),
    'access arguments' => array('administer modules'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/hosting/saas/settings'] = array(
    'title' => 'Basic settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/hosting/saas/clients'] = array(
    'title' => 'Site handovers',
    'description' => 'Configure how initial site control is passed to clients',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_saas_settings_clients'),
    'access arguments' => array('administer sites'),
    'file' => 'hosting_saas.utils.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/hosting/saas/variables'] = array(
    'title' => 'Injected variables',
    'description' => 'Configure variables injected into client sites',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_saas_settings_variables'),
    'access arguments' => array('administer sites'),
    'file' => 'hosting_saas.utils.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * SaaS configuration form.
 */
function hosting_saas_settings() {
  $form['intro'] = array(
    '#markup' => '<p>All of these settings affect the handling of remote requests to create sites via Install and Clone tasks. For the Services endpoint configuration, see <a href="/admin/structure/services">the Services configuration</a>.</p>'
  );

  $form['hosting_saas_master_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Master domain name'),
    '#description' => t('The master domain for your SaaS sites. Accepted URLs will be <em>*.thisfield</em>. If none is configured, all new site name URLs will be accepted.'),
    '#default_value' => variable_get('hosting_saas_master_domain', 'localhost'),
  );

  $form['hosting_saas_template_site_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Template site URL'),
    '#description' => t('Enter the name/URL of the site to create via Clone tasks. This can either be set here, or provided in the remote request. If provided in the request, the value here will be overridden.'),
    '#autocomplete_path' => 'hosting/sites/autocomplete',
    '#default_value' => variable_get('hosting_saas_template_site_nid', ''),
  );

  $form['hosting_saas_db_server'] = array(
    '#type' => 'select',
    '#title' => t('Database server'),
    '#description' => t('The database server to use for new sites. This can either be set here, or provided in the remote request. If provided in the request, the value here will be overridden.'),
    '#options' => hosting_get_servers('db'),
    '#default_value' => variable_get('hosting_saas_db_server'),
  );

  $form['hosting_saas_target_platform'] = array(
    '#type' => 'select',
    '#title' => t('Platform'),
    '#description' => t('The platform to use for new sites. This can either be set here, or provided in the remote request. If provided in the request, the value here will be overridden.'),
    // Get a list of enabled platforms on any Web server.
    '#options' => _hosting_get_platforms(0, TRUE),
    '#default_value' => variable_get('hosting_saas_target_platform'),
  );

  $form['hosting_saas_max_capacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of sites'),
    '#description' => t('The maximum number of SaaS sites allowed on the server. This will only count active sites. For an unlimited number of sites, leave this value at zero.'),
    '#default_value' => variable_get('hosting_saas_max_capacity', '0'),
  );

  return system_settings_form($form);
}

/**
 * Validation for SaaS configuration form.
 */
function hosting_saas_settings_validate($form, &$form_state) {

  // Ensure that a site with the provided site name exists.
  if (!empty($form_state['values']['hosting_saas_template_site_nid'])) {
    if (!hosting_get_site_by_url($form_state['values']['hosting_saas_template_site_nid'], FALSE)) {
      form_set_error('hosting_saas_template_site_nid', t('Must be a valid site name.'));
    }
  }

  // Ensure that the DB server ID is actually a server.
  if (!empty($form_state['values']['hosting_saas_db_server'])) {
    $node = node_load($form_state['values']['hosting_saas_db_server']);
    if ((!is_object($node)) || ($node->type != 'server')) {
      form_set_error('hosting_saas_db_server', t('Must be a valid database server.'));
    }
  }

  // Ensure that the target platform ID is actually a platform.
  if (!empty($form_state['values']['hosting_saas_target_platform'])) {
    $node = node_load($form_state['values']['hosting_saas_target_platform']);
    if ((!is_object($node)) || ($node->type != 'platform')) {
      form_set_error('hosting_saas_target_platform', t('Must be a valid platform.'));
    }
  }

  // Ensure that the maximum number of sites is a non-negative integer.
  $number = $form_state['values']['hosting_saas_max_capacity'];
  if ((!ctype_digit($number)) || ($number < 0)) {
    form_set_error('hosting_saas_max_capacity', t('Must be a non-negative number.'));
  }
}

/**
 * Implements hook_services_request_preprocess_alter().
 *
 * Adds additional information to site creation requests.
 */
function hosting_saas_services_request_preprocess_alter($controller, &$args, $options) {

  // Act only on task creation by the SaaS user.
  if (($GLOBALS['user']->name == HOSTING_SAAS_USER) &&
      ($options['resource'] == 'task') &&
      ($controller['callback'] == 'hosting_services_save_task')) {

    $site = &$args[0];
    $task_type = $args[1];
    $task_arguments = &$args[2];

    watchdog('hosting_saas', 'Remote request received: Attempting to run "%task_type" task on site "%task_site".', array(
      '%task_type' => $task_type,
      '%task_site' => $site,
    ));

    $generators = AegirSaasSiteTaskGenerator::MAP;
    $generator_class = isset($generators[$task_type]) ? $generators[$task_type] : 'AegirSaasSiteTaskGenerator';
    $generator = new $generator_class($site, $task_type, $task_arguments);

    $generator->setSiteIdAndVerify();

    if (is_a($generator, 'AegirSaasCreateSiteTaskGenerator')) {
      $generator->prepareForSiteCreation();
      $site = $generator->getUpdatedSiteIdFromConfiguration();
      $task_arguments = $generator->getUpdatedArgumentsFromConfiguration();
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function hosting_saas_node_insert($node) {
  $bridged_values = variable_get('hosting_saas_utils_bridged_values', array());

  // Save the newly cloned site's variables to the DB.
  if ($node->type == 'site' && !empty($bridged_values[$node->title])) {
    hosting_variables_set_site_variables($node->nid, $bridged_values[$node->title]);

    // This variable is meant to be temporary.
    unset($bridged_values[$node->title]);
    variable_set('hosting_saas_utils_bridged_values', $bridged_values);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function hosting_saas_ctools_plugin_api($owner, $api) {
  // Ensure that we'll be able to register our Services endpoint.
  if (($owner == 'services') && ($api == 'services')) {
    return array(
      'version' => 3,
    );
  }
}

/**
 * Implements hook_default_services_endpoint().
 *
 * Register our Services endpoint.
 */
function hosting_saas_default_services_endpoint() {

  // This is the configuration for our endpoint. It differs from a UI export
  // in that we're generating a pseudo-random API key through a function call.
  $endpoint = new stdClass();
  $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
  $endpoint->api_version = 3;
  $endpoint->name = 'hosting_saas';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'aegir/saas';
  $endpoint->authentication = array(
    'services_api_key_auth' => array(
      // The API key being defined here will actually change every time the
      // configuration is loaded. This is a security feature to prevent a fixed
      // or empty one from being used for unauthorized remote access. To
      // generate a stable one that can be used for legitimate access
      // consistently, an administrator must manually save the authentication
      // form to override these default settings.
      'api_key' => drupal_random_key(16),
      'user' => 'Aegir SaaS',
    ),
  );
  $endpoint->server_settings = array(
    'formatters' => array(
      'bencode' => TRUE,
      'json' => TRUE,
      'php' => TRUE,
      'xml' => TRUE,
      'jsonp' => FALSE,
    ),
    'parsers' => array(
      'application/json' => TRUE,
      'application/vnd.php.serialized' => TRUE,
      'application/x-www-form-urlencoded' => TRUE,
      'application/xml' => TRUE,
      'multipart/form-data' => TRUE,
      'text/xml' => TRUE,
    ),
  );
  $endpoint->resources = array(
    'hosting_site' => array(
      'alias' => 'site',
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'hosting_task' => array(
      'alias' => 'task',
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
      ),
    ),
  );
  $endpoint->debug = 0;

  // Add the single endpoint definition to the collection.
  $endpoints['hosting_saas'] = $endpoint;

  // Return the collection.
  return $endpoints;
}

/**
 * Implements hook_post_hosting_TASK_TYPE_task().
 */
function hosting_saas_post_hosting_verify_task($task, $data) {
  // TODO: Option to unset the settings configuration post-verify
  // (so the user can change them).

  $site = node_load($task->rid);

  if (!empty($site)) {
    $target = $site->hosting_name;
    $todo = variable_get('hosting_saas_todo', array());

    if (!empty($todo[$site->hosting_name])) {
      $client_user = $todo[$site->hosting_name]['create_new_user'];

      if (!empty($client_user)) {
        drush_log(t('[hosting_saas] Creating new user: !name (!email).', array('!name' => $client_user['name'], '!email' => $client_user['email'])));

        $results['user-create'] = provision_backend_invoke($target, 'user-create "' . $client_user['name'] . '" --mail="' . $client_user['email'] . '"');
      }
      else {
        $client_user =  $todo[$site->hosting_name]['change_admin_user'];

        if (!empty($client_user)) {
          //drush_log(t('[hosting_saas] Assigning new values to admin user: !name (!email).', array('!name' => $client_user['name'], '!email' => $client_user['email'])));
          // TODO
        }
      }

      if (!empty($todo[$site->hosting_name]['set_user_role'])) {
        drush_log(t('[hosting_saas] Assigning role: !role', array('!role' => $todo[$site->hosting_name]['set_user_role'])));
        $results['user-assign-role'] = provision_backend_invoke($target, "user-add-role '" . $todo[$site->hosting_name]['set_user_role'] . "' --mail='" . $client_user['email'] . "'");
      }

      //   send_email
      if ($todo[$site->hosting_name]['send_email']) {
        // Clumsily parse uid and send notification until Drush implements --notify
        $user_info = provision_backend_invoke($target, 'user-information --full "' . $client_user['email'] . '"');

        if (preg_match ('/User ID.* ([0-9]+)/', $user_info['output'], $matches)) {
          $new_user_uid = $matches[1];
        }
        else {
          drush_set_error(t('[hosting_saas_utils] Could not parse user ID of new user! User creation failed?'));
        }

        drush_log('[hosting_saas_utils] Parsed uid of new user of new site: ' . $new_user_uid);

        $message = "status_activated";
        $result ['notify'] = provision_backend_invoke($target, "eval  '_user_mail_notify(\"".$message."\", user_load($new_user_uid));'");

        drush_log(t("[hosting_saas_utils] Sent registration email to !name",  array('!name' => $client_user['name'])));
      }

      unset($todo[$site->hosting_name]);
      variable_set('hosting_saas_utils_todo', $todo);
    }
  }
}
