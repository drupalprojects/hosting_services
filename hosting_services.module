<?php 

/**
 * Implementation of hook_perm
 */
function hosting_services_perm(){
  return array( 
    'unsuspend client sites', 'suspend client sites', 'get task', 'create task', 
    'get profile', 'list profiles', 'get platform', 'list platforms',
    'save site', 'get site'
  );
}

/**
 * Placeholder implementation of hook_menu
 *
 * TODO Use or remove this hook
 */
function hosting_services_menu() {
  return array();
}

/**
 * Implementation of hook_resources
 */
function hosting_services_resources() {
  $resources = array();

  // Profile Services
  $resources['hosting_profile'] = array(
    // List operation
    'index' => array(
      'callback' => 'hosting_get_profiles',
      'help' => t('List all available profiles'),
      'access arguments' => array('list profiles'),
    ),
    // Get operation
    'retrieve' => array(
      'callback' => 'hosting_services_profile_get',
      'help' => t('Get a profile and a list of valid platforms'),
      'access arguments' => array('get profile'),
      'file' => array('file' => 'profile.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('Enter the node ID for the profile you wish to get'),
          'source' => array('path' => '0')
        ),
      ),
    ),
  );

  // Platform Services
  $resources['hosting_platform'] = array(
    // List operation
    'index' => array(
      'callback' => 'hosting_services_platform_list',
      'help' => t('List all available platforms'),
      'access arguments' => array('list platforms'),
      'file' => array('file' => 'platform.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'row_count',
          'type' => 'int',
          'description' => t('You can limit the number of returned results to cut down on load time'),
          'optional' => TRUE,
          'source' => 'data'
        ),
        array(
          'name' => 'offset',
          'type' => 'int',
          'description' => t('Set the offset of rows returned'),
          'optional' => TRUE,
          'source' => 'data' 
        ),
      ),
    ),
    // Get operation
    'retrieve' => array(
      'callback' => 'hosting_services_platform_get',
      'help' => t('Get a platform'),
      'access arguments' => array('get platform'),
      'file' => array('file' => 'platform.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('Enter the node ID for the platform you wish to get'),
          'source' => array('path' => '0')
        ),
      ),
    ),
  );

  // Task Services
  $resources['hosting_task'] = array(
    'index' => array(
      'callback' => 'hosting_get_tasks',
      'help' => t('List all tasks'),
      'access arguments' => array('get task'),
    ),
    'retrieve' => array(
      'callback' => 'hosting_services_get_task',
      'help' => t('Fetch an Aegir task'),
      'access arguments' => array('get task'),
      'file' => array('file' => 'task.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('The task node id'),
          'source' => array('path' => '0')
        ),
      ),
    ),
    'create' => array(
      'callback' => 'hosting_services_save_task',
      'help' => t('Create an aegir task'),
      'access arguments' => array('create task'),
      'file' => array('file' => 'task.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => TRUE,
          'description' => t('The task node id'),
          'source' => 'data',
          'default value' => NULL,
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'optional' => TRUE,
          'description' => t('Data to be used in constructing the task'),
          'default value' => array(),
          'source' => 'data',
        ),
        array(
          'name' => 'options',
          'type' => 'struct',
          'optional' => TRUE,
          'description' => t('Options specific to certain task types'),
          'default value' => array(),
          'source' => 'data',
        ),
        array(
          'name' => 'rid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('The node id of the node to apply the task to'),
          'source' => 'data',
        ),
        array(
          'name' => 'type',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('The task type'),
          'source' => 'data',
        ),
      ),
    ),
    'update' => array(
      'callback' => 'hosting_services_save_task',
      'help' => t('Update an aegir task'),
      'access arguments' => array('create task'),
      'file' => array('file' => 'task.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('The task node id'),
          'source' => array('path' => 0),
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'optional' => FALSE,
          'description' => t('Data to be used in constructing the task'),
          'source' => 'data',
        ),
        array(
          'name' => 'options',
          'type' => 'struct',
          'optional' => TRUE,
          'description' => t('Options specific to certain task types'),
          'default value' => array(),
          'source' => 'data',
        ),
      ),
    ),
    'delete' => array(
      'callback' => 'node_delete',
      'help' => t('Delete an aegir task'),
      'access arguments' => array('create task'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('The task node id'),
          'source' => array('path' => 0),
        ),
      ),
    ),
  );

  // Site Services
  $resources['hosting_site'] = array(
    'index' => array(
      'callback' => 'hosting_services_list_sites',
      'help' => t('List all sites'),
      'access arguments' => array('get site'),
      'file' => array('file' => 'site.inc', 'module' => 'hosting_services'),
    ),
    'retrieve' => array(
      'callback' => 'hosting_get_site_by_url',
      'help' => t('Fetch the site node'),
      'access arguments' => array('get site'),
      'args' => array(
        array(
          'name' => 'url',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('The site url'),
          'source' => array('path' => '0')
        ),
      ),
    ),
    'create' => array(
      'callback' => 'hosting_services_save_site',
      'help' => t('Create a site'),
      'access arguments' => array('save site'),
      'file' => array('file' => 'site.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'url',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('URL of the site to create'),
          'source' => 'data',
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'description' => t('Must specify client, platform and profile nids'),
          'source' => 'data',
          'optional' => FALSE,
        ),
      ),
    ),
    'update' => array(
      'callback' => 'hosting_services_save_site',
      'help' => t('Update a site'),
      'access arguments' => array('save site'),
      'file' => array('file' => 'site.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'url',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('URL of the site to change'),
          'source' => array('path' => 0),
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'description' => t('Site values to change'),
          'source' => 'data',
          'optional' => FALSE,
        ),
      ),
    ),

  );

  // Client Services
  $resources['hosting_client'] = array(
    'index' => array(
      'callback' => '_hosting_get_clients',
      'help' => t('List all clients'),
      'access arguments' => array('view client'),
    ),
    'retrieve' => array(
      'callback' => 'hosting_get_client',
      'help' => t('Fetch the client node.'),
      'access arguments' => array('view client'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Nid or unique name of the client'),
          'source' => array('path' => '0')
        ),
      ),
    ),
    'create' => array(
      'callback' => 'hosting_services_client_save',
      'help' => t('Create a client'),
      'access arguments' => array('create client'),
      'file' => array('file' => 'client.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'name',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Name to give the client'),
          'source' => 'data'
        ),
      ),
    ),
    'update' => array(
      'callback' => 'hosting_services_client_save',
      'help' => t('Update a client'),
      'access callback' => 'hosting_services_client_access',
      'access arguments append' => TRUE,
      'file' => array('file' => 'client.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'name',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Name or nid of the client'),
          'source' => array('path' => 0),
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'description' => t('The node data object'),
          'source' => 'data',
          'optional' => FALSE,
        ),
      ),
    ),
    'delete' => array(
      'callback' => 'hosting_services_client_delete',
      'help' => t('Delete a client'),
      'access callback' => 'hosting_services_client_access',
      'access arguments append' => TRUE,
      'file' => array('file' => 'client.inc', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'name',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Name or nid of the client'),
          'source' => array('path' => 0),
        ),
      ),
    ),
    'actions' => array(
      // Return a client's sites
      'sites' => array(
        'help' => t("Return a list of the client's sites"),
        'callback' => 'hosting_services_client_sites',
        'access arguments' => array('view client'),
        'file' => array('file' => 'client.inc', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t("Nid or unique name of the client"),
            'source' => 'data',
          ),
        ),    
      ),
      // Disable all of a client's sites
      'disable_sites' => array(
        'help' => t('Disable all client sites'),
        'callback' => 'hosting_services_suspend_client_sites',
        'access arguments' => array('suspend client sites'),
        'file' => array('file' => 'client.inc', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t("Nid or unique name of the client"),
            'source' => 'data',
          ),
        ),
      ),
      // Enable all of a client's sites
      'enable_sites' => array(
        'help' => t('Enable all client sites'),
        'callback' => 'hosting_services_unsuspend_client_sites',
        'access arguments' => array('unsuspend client sites'),
        'file' => array('file' => 'client.inc', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t("Nid or unique name of the client"),
            'source' => 'data',
          ),
        ),
      ),
    ),
  );

  return $resources;
}

/**
 * Implementation of Hook_nodeapi
 */
function hosting_services_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){

  switch($node->type){
    case 'platform':
      // Lets define if we can create new sites on this platform from remote
      switch($op){
        case 'insert':
          if( $node->remote_site_creation_enabled ){
            db_query('INSERT INTO {hosting_services_platforms} (vid, nid) VALUES (%d, %d)', $node->vid, $node->nid);
          }
          break;
        case 'update':
         $data = array(
           'nid' => $node->nid,
           'vid' => $node->vid,
         );
         $rec_check = db_result(db_query("SELECT COUNT(*) FROM {hosting_services_platforms} WHERE nid = %d AND vid = %d", $node->nid, $node->vid));
         if ($node->remote_site_creation_enabled && $rec_check) {
            drupal_write_record('hosting_services_platforms', $data, 'nid');
          } 
          else if ($node->remote_site_creation_enabled) {
            drupal_write_record('hosting_services_platforms', $data);
          } 
          else if($node->services_enabled == 0 ){
            db_query("DELETE FROM {hosting_services_platforms} WHERE nid = %d", $node->nid);
          }
          break;
        case 'delete':
          db_query('DELETE FROM {hosting_services_platforms} WHERE nid =%d',$node->nid);
          break;
        case 'delete_revision':
          db_query('DELETE FROM {hosting_services_platforms} WHERE vid = %d', $node->vid);
          break;
        case 'load':
          if(db_result(db_query('SELECT COUNT(*) FROM {hosting_services_platforms} 
          WHERE nid = %d', $node->nid)) > 0){
            $node->remote_site_creation_enabled = 1;
          } else {
            $node->remote_site_creation_enabled = 0;
          }
          break;
        case 'view':
          break;
    }
    break;
}
}

/**
 * Implementation of hook_form_alter
 */
function hosting_services_form_alter(&$form, &$form_state){
  if($form['#token'] == 'platform_node_form'){
    $form['remote_site_creation_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable this Platform for Remote Site Creation'),
      '#description' => t('Enables a platform to be used when creating sites via services.'),
      '#default_value' => $form['#node']->remote_site_creation_enabled,
    );
  }   
}
