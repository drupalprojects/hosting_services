<?php

/**
 * Implementation of hook_perm
 */
function hosting_services_permission(){
  $tasks = hosting_available_tasks();
  foreach($tasks as $node_type => $info){
    foreach($info as $task => $task_info){
      $perms[$task . ' ' . $node_type] = array(
        'title' => $task . ' ' . $node_type,
        'description' => '',
      );
    }
  }

  $perms['unsuspend client sites'] = array(
    'title' => t('Unsuspend Client Sites'),
    'description' => t(''),
  );
  $perms['suspend client sites'] = array(
    'title' => t('Suspend Client Sites'),
    'description' => t(''),
  );
  $perms['list profiles'] = array(
    'title' => t('List Profiles'),
    'description' => t(''),
  );
  $perms['get profile'] = array(
    'title' => t('Get Profiles'),
    'description' => t(''),
  );
  $perms['list platforms'] = array(
    'title' => t('List Platforms'),
    'description' => t(''),
  );
  $perms['get platform'] = array(
    'title' => t('Get Platform'),
    'description' => t(''),
  );
  $perms['get site'] = array(
    'title' => t('Get Site'),
    'description' => t(''),
  );
  $perms['save site'] = array(
    'title' => t('Save Site'),
    'description' => t(''),
  );
  $perms['log into site'] = array(
    'title' => t('Log Into Site'),
    'description' => t(''),
  );
  $perms['get task'] = array(
    'title' => t('Get Task'),
    'description' => t(''),
  );

  return $perms;

}

/**
 * Placeholder implementation of hook_menu
 *
 * TODO Use or remove this hook
 */
function hosting_services_menu() {
  return array();
}

/**
 * Implementation of hook_resources
 */
function hosting_services_services_resources() {
  $resources = array();

  // Signup actions
  $resources['hosting_signup'] = array(
    'index' => array(
      'help' => t("Returns the signup form"),
      'callback' => 'hosting_services_signup_form',
      'access arguments' => array('access content'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.signup', 'module' => 'hosting_services'),
    ),
  );

  // Profile Services
  $resources['hosting_profile'] = array(
    // List operation
    'index' => array(
      'callback' => 'hosting_get_profiles',
      'help' => t('List all available profiles'),
      'access arguments' => array('list profiles'),
    ),
    // Get operation
    'retrieve' => array(
      'callback' => 'hosting_services_profile_get',
      'help' => t('Get a profile and a list of valid platforms'),
      'access arguments' => array('get profile'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.profile', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('Enter the node ID for the profile you wish to get'),
          'source' => array('path' => '0')
        ),
      ),
    ),
  );

  // Platform Services
  $resources['hosting_platform'] = array(
    // List operation
    'index' => array(
      'callback' => 'hosting_services_platform_list',
      'help' => t('List all available platforms'),
      'access arguments' => array('list platforms'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.platform', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'row_count',
          'type' => 'int',
          'description' => t('You can limit the number of returned results to cut down on load time'),
          'optional' => TRUE,
          'source' => 'param'
        ),
        array(
          'name' => 'offset',
          'type' => 'int',
          'description' => t('Set the offset of rows returned'),
          'optional' => TRUE,
          'source' => 'param'
        ),
      ),
    ),
    // Get operation
    'retrieve' => array(
      'callback' => 'hosting_services_platform_get',
      'help' => t('Get a platform'),
      'access arguments' => array('get platform'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.platform', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('Enter the node ID for the platform you wish to get'),
          'source' => array('path' => '0')
        ),
      ),
    ),
    'actions' => array(
      'verify' => array(
        'callback' => 'hosting_services_platform_task',
        'help' => t('Verify Platform'),
        'access arguments' => array("verify platform"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.platform', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The platform node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'lock' => array(
        'callback' => 'hosting_services_platform_task',
        'help' => t('Lock Platform'),
        'access arguments' => array("lock platform"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.platform', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The platform node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'unlock' => array(
        'callback' => 'hosting_services_platform_task',
        'help' => t('Unlock Platform'),
        'access arguments' => array("unlock platform"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.platform', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The platform node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'delete' => array(
        'callback' => 'hosting_services_platform_task',
        'help' => t('Delete Plaform'),
        'access arguments' => array("delete platform"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.platform', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The platform node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'sites' => array(
        'callback' => 'hosting_services_platform_get_sites',
        'help' => t('Get platform sites'),
        'access arguments' => array("get site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.platform', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The platform node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
    ),
  );

  // Task Services
  $resources['hosting_task'] = array(
    'index' => array(
      'callback' => 'hosting_get_tasks',
      'help' => t('List all tasks'),
      'access arguments' => array('get task'),
    ),
    'retrieve' => array(
      'callback' => 'hosting_services_get_task',
      'help' => t('Fetch an Aegir task'),
      'access arguments' => array('get task'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.task', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('The task node id'),
          'source' => array('path' => '0')
        ),
      ),
    ),
    'create' => array(
      'callback' => 'hosting_services_save_task',
      'help' => t('Create an aegir task'),
      'access arguments' => array('create task'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.task', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('The task node id'),
          'source' => array('data' => 'nid'),
          'default value' => NULL,
        ),
        array(
          'name' => 'type',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('The task type'),
          'source' => array('data' => 'type'),
        ),
        array(
          'name' => 'args',
          'type' => 'struct',
          'optional' => TRUE,
          'description' => t('Options specific to certain task types'),
          'default value' => array(),
          'source' => array('data' => 'options'),
        ),
      ),
    ),
    // There's no update operation, we now use new nodes for each run
    'delete' => array(
      'callback' => 'node_delete',
      'help' => t('Delete an aegir task'),
      'access arguments' => array('create task'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'optional' => FALSE,
          'description' => t('The task node id'),
          'source' => array('path' => 0),
        ),
      ),
    ),
    'actions' => array(
      'get_task_list' => array(
        'callback' => 'hosting_services_get_task_list',
        'help' => t('Retrieve all current tasks for given site, platform or server'),
        'access arguments' => array("get task"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.task', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The reference\'s node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'get_task_log' => array(
        'callback' => 'hosting_services_get_task_log',
        'help' => t('Fetch an Aegir task log'),
        'access arguments' => array('get task'),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.task', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The reference\'s node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
    ),
  );

  // Site Services
  $resources['hosting_site'] = array(
    'index' => array(
      'callback' => 'hosting_services_list_sites',
      'help' => t('List all sites'),
      'access arguments' => array('get site'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
    ),
    'retrieve' => array(
      'callback' => 'hosting_get_site_by_url',
      'help' => t('Fetch the site node'),
      'access arguments' => array('get site'),
      'args' => array(
        array(
          'name' => 'url',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('The site url'),
          'source' => array('path' => '0')
        ),
      ),
    ),
    'create' => array(
      'callback' => 'hosting_services_save_site',
      'help' => t('Create a site'),
      'access arguments' => array('save site'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'url',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('URL of the site to create'),
          'source' => array('data' => 'url'),
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'description' => t('Must specify client, platform and profile nids'),
          'source' => array('data' => 'data'),
          'optional' => FALSE,
        ),
      ),
    ),
    'update' => array(
      'callback' => 'hosting_services_save_site',
      'help' => t('Update a site'),
      'access arguments' => array('save site'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'url',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('URL of the site to change'),
          'source' => array('path' => 0),
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'description' => t('Site values to change'),
          'source' => array('data' => 'data'),
          'optional' => FALSE,
        ),
      ),
    ),
    'actions' => array(
      'verify' => array(
        'callback' => 'hosting_services_site_task',
        'help' => t('Verify Site'),
        'access arguments' => array("verify site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      // We might not want to give the REST permission to get all nodes
      'get_by_nid' => array(
        'callback' => 'node_load',
        'help' => t('Get site by nid'),
        'access arguments' => array("get site"),
        'file' => array('type' => 'mode', 'name' => 'node', 'module' => 'node'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'login_link' => array(
        'callback' => 'hosting_services_site_login',
        'help' => t('Log Into Site'),
        'access arguments' => array("log into site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'enable' => array(
        'callback' => 'hosting_services_site_task',
        'help' => t('Enable Site'),
        'access arguments' => array("enable site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'disable' => array(
        'callback' => 'hosting_services_site_task',
        'help' => t('Disable Site'),
        'access arguments' => array("disable site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'backup' => array(
        'callback' => 'hosting_services_site_task',
        'help' => t('Backup Site'),
        'access arguments' => array("backup site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'backup-delete' => array(
        'callback' => 'hosting_services_site_task',
        'help' => t('Delete Site Backups'),
        'access arguments' => array("backup-delete site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      'delete' => array(
        'callback' => 'hosting_services_site_task',
        'help' => t('Delete Site'),
        'access arguments' => array("delete site"),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.site', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'type',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The type of task'),
            'source' => array('param' => 'type'),
          ),
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t('The site node id'),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
    ),
  );

  // Client Services
  $resources['hosting_client'] = array(
    'index' => array(
      'callback' => '_hosting_get_clients',
      'help' => t('List all clients'),
      'access arguments' => array('view client'),
    ),
    'retrieve' => array(
      'callback' => 'hosting_get_client',
      'help' => t('Fetch the client node.'),
      'access arguments' => array('view client'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Nid or unique name of the client'),
          'source' => array('path' => '0')
        ),
      ),
    ),
    'create' => array(
      'callback' => 'hosting_services_client_save',
      'help' => t('Create a client'),
      'access arguments' => array('create client'),
      'file' => array('type' => 'inc', 'name' => 'hosting_services.client', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'name',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Name to give the client'),
          'source' => array('data' => 'name'),
        ),
      ),
    ),
    'update' => array(
      'callback' => 'hosting_services_client_save',
      'help' => t('Update a client'),
      'access callback' => 'hosting_services_client_access',
      'access arguments append' => TRUE,
      'file' => array('type' => 'inc', 'name' => 'hosting_services.client', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'name',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Name or nid of the client'),
          'source' => array('path' => 0),
        ),
        array(
          'name' => 'data',
          'type' => 'struct',
          'description' => t('The node data object'),
          'source' => array('data' => 'data'),
          'optional' => FALSE,
        ),
      ),
    ),
    'delete' => array(
      'callback' => 'hosting_services_client_delete',
      'help' => t('Delete a client'),
      'access callback' => 'hosting_services_client_access',
      'access arguments append' => TRUE,
      'file' => array('type' => 'inc', 'name' => 'hosting_services.client', 'module' => 'hosting_services'),
      'args' => array(
        array(
          'name' => 'name',
          'type' => 'string',
          'optional' => FALSE,
          'description' => t('Name or nid of the client'),
          'source' => array('path' => 0),
        ),
      ),
    ),
    'actions' => array(
      // Return a client's sites
      'sites' => array(
        'help' => t("Return a list of the client's sites"),
        'callback' => 'hosting_services_client_sites',
        'access arguments' => array('view client'),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.client', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t("Nid or unique name of the client"),
            'source' => array('data' => 'name'),
          ),
        ),
      ),
      // Disable all of a client's sites
      'disable_sites' => array(
        'help' => t('Disable all client sites'),
        'callback' => 'hosting_services_suspend_client_sites',
        'access arguments' => array('suspend client sites'),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.client', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t("Nid or unique name of the client"),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
      // Enable all of a client's sites
      'enable_sites' => array(
        'help' => t('Enable all client sites'),
        'callback' => 'hosting_services_unsuspend_client_sites',
        'access arguments' => array('unsuspend client sites'),
        'file' => array('type' => 'inc', 'name' => 'hosting_services.client', 'module' => 'hosting_services'),
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'string',
            'optional' => FALSE,
            'description' => t("Nid or unique name of the client"),
            'source' => array('data' => 'nid'),
          ),
        ),
      ),
    ),
  );

  return $resources;
}

/**
 * Implements hook_node_insert().
 */
function hosting_services_node_insert($node){
  if($node->type == 'platform'){
    if( $node->remote_site_creation_enabled ){
      db_insert('hosting_services_platforms')
        ->fields(array(
          'vid' => $node->vid,
          'nid' => $node->nid,
        ))
        ->execute();
    }
  }
}

/**
 * Implements hook_node_update().
 */
function hosting_services_node_update($node){

  $data = array(
    'nid' => $node->nid,
    'vid' => $node->vid,
  );
  $rec_check = db_query("SELECT COUNT(*) as total FROM {hosting_services_platforms}
                         WHERE nid = :nid AND vid = :vid",
                         array(':nid' => $node->nid, ':vid' => $node->vid))->fetchObject();
  if ($node->remote_site_creation_enabled && $rec_check && $rec_check->total > 0) {
    drupal_write_record('hosting_services_platforms', $data, 'nid');
  }
  else if ($node->remote_site_creation_enabled) {
    drupal_write_record('hosting_services_platforms', $data);
  }
  else if(isset($node->remote_site_creation_enabled) && $node->remote_site_creation_enabled == FALSE){
    db_delete('hosting_services_platforms')
      ->condition('nid', $node->nid)
      ->execute();
  }

}

/**
 * Implements hook_node_delete().
 */
function hosting_services_node_delete($node){
  db_delete('hosting_services_platforms')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_load().
 */
function hosting_services_node_load($nodes){
  $node = array_shift($nodes);
  if(db_query('SELECT COUNT(*) FROM {hosting_services_platforms}
               WHERE nid = :nid', array(':nid' => $node->nid))->fetchField() > 0){
    $node->remote_site_creation_enabled = 1;
  }
  else {
    $node->remote_site_creation_enabled = 0;
  }
}


/**
 * Implementation of hook_form_alter
 */
function hosting_services_form_alter(&$form, &$form_state, $form_id){
  if($form_id == 'platform_node_form'){
    $form['remote_site_creation_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable this Platform for Remote Site Creation'),
      '#description' => t('Enables a platform to be used when creating sites via services.'),
      '#default_value' => isset($form['#node']->remote_site_creation_enabled) ? $form['#node']->remote_site_creation_enabled : 0,
    );

    $form['#submit'][] = 'hosting_services_platform_form_submit';
  }
}

function hosting_services_platform_form_submit(&$form, &$form_state) {
  $form['#node']->remote_site_creation_enabled = $form_state['values']['remote_site_creation_enabled'];
}
